lua << EOF
local wk = require("which-key")

wk.register({
	["."] = { "<cmd>e $MYVIMRC<cr>"               , "open init" },
	[","] = { "<cmd>Buffers<cr>"                  , "open buffers" },
	[";"] = { "<cmd>Commands<cr>"                 , "commands" },
	q     = { "<cmd>q<cr>"                        , "quit" },
	u     = { "<cmd>UndotreeToggle<cr>"           , "undo tree"},
	r     = { "<cmd>lua vim.lsp.buf.rename()<cr>" , "rename"},

	a = {
		name = "+actions"                               ,
		c = {"<cmd>ColorizerToggle<cr>"                 , "colorizer"},
		m = {"<cmd>MarkdownPreview<cr>"                 , "markdown preview"},
		M = {"<cmd>MarkdownPreviewStop<cr>"             , "markdown preview stop"},
		r = {"<cmd>source ~/dotfiles/nvim/init.vim<cr>" , "reload init.vim"},
		s = {"<cmd>noh<cr>"                             , "remove search highlight"},
	},

	b = {
		name = "+buffera"         ,
		a = {"<cmd>bufdo bd!<cr>" , "kill all"},
		f = {"<cmd>bfirst<cr>"    , "first-buffer"},
		h = {"<cmd>Startify<cr>"  , "home-buffer"},
		l = {"<cmd>blast<cr>"     , "last-buffer"},
		n = {"<cmd>bnext<cr>"     , "next-buffer"},
		p = {"<cmd>bprevious<cr>" , "previous-buffer"},
	},

	f = {
		name = "file"                         ,
		n = { "New File"                      , "New file" },
		e = {"Edit File"                      , "Edit file"},
		b = {"<cmd>Farr --source=vimgrep<cr>" , "buffer"},
		p = {"<cmd>Farr --source=rgnvim<cr>"  , "project"},
		f = {"<cmd>Files<cr>"                 , "files"},
		g = {"<cmd>GFiles<cr>"                , "git files"},
		G = {"<cmd>GFiles?<cr>"               , "modified git files"},
		s = {"<cmd>w<cr>"                     , "save"},
	},

	g = {
		name = "+git"                                 ,
		A = {"<cmd>Git add .<cr>"                     , "add all"},
		a = {"<cmd>Git add %<cr>"                     , "add current"},
		b = {"<cmd>Git blame<cr>"                     , "blame"},
		c = {"<cmd>Git commit<cr>"                       , "commit"},
		d = {
			name = "+diff",
			j = {":diffget //3"                         , "diffget //3"},
			f = {":diffget //2"                         , "diffget //2"},
			},
		D = {"<cmd>Gdiffsplit<cr>"                    , "diff split"},
		g = {"<cmd>GGrep<cr>"                         , "git grep"},
		s = {"<cmd>Gstatus<cr>"                       , "status"},
		h = {"<cmd>GitGutterLineHighlightsToggle<cr>" , "highlight hunks"},
		H = {"<Plug>(GitGutterPreviewHunk)<cr>"       , "preview hunk"},
		i = {"<cmd>Gist -b<cr>"                       , "post gist"},
		j = {"<Plug>(GitGutterNextHunk)"              , "next hunk"},
		k = {"<Plug>(GitGutterPrevHunk)"              , "prev hunk"},
		l = {"<cmd>Git log<cr>"                       , "log"},
		m = {"<Plug>(git-messenger)"                  , "message"},
		p = {"<cmd>Git push<cr>"                      , "push"},
		P = {"<cmd>Git pull<cr>"                      , "pull"},
		r = {"<cmd>GRemove<cr>"                       , "remove"},
		G = {"<Plug>(GitGutterStageHunk)"             , "stage hunk"},
		S = {"<cmd>!git status<cr>"                   , "status"},
		t = {":GitGutterSignsToggle<cr>"              , "toggle signs"},
		u = {"<Plug>(GitGutterUndoHunk)"              , "undo hunk"},
		v = {"<cmd>GV<cr>"                            , "view commits"},
		V = {"<cmd>GV!<cr>"                           , "view buffer commits"},
	},

	G = {
		name = "+gist"           ,
		a = {"<cmd>Gist -a<cr>"  , "post gist anon"},
		b = {"<cmd>Gist -b<cr>"  , "post gist browser"},
		d = {"<cmd>Gist -d<cr>"  , "delete gist"},
		e = {"<cmd>Gist -e<cr>"  , "edit gist"},
		l = {"<cmd>Gist -l<cr>"  , "list public gists"},
		s = {"<cmd>Gist -ls<cr>" , "list starred gists"},
		m = {"<cmd>Gist -m<cr>"  , "post gist all buffers"},
		p = {"<cmd>Gist -P<cr>"  , "post public gist "},
		P = {"<cmd>Gist -p<cr>"  , "post private gist "},
	},

	k = {
		name = "+task"                          ,
		c = {"<cmd>AsyncTask file-compile<cr>"  , "compile file"},
		b = {"<cmd>AsyncTask project-build<cr>" , "build project"},
		e = {"<cmd>AsyncTaskEdit<cr>"           , "edit local tasks"},
		f = {"<cmd>AsyncTaskFzf<cr>"            , "find task"},
		g = {"<cmd>AsyncTaskEdit!<cr>"          , "edit global tasks"},
		h = {"<cmd>AsyncTaskList!<cr>"          , "list hidden tasks"},
		l = {"<cmd>CocList tasks<cr>"           , "list tasks"},
		m = {"<cmd>AsyncTaskMacro<cr>"          , "macro help"},
		o = {"<cmd>copen<cr>"                   , "open task view"},
		r = {"<cmd>AsyncTask file-run<cr>"      , "run file"},
		p = {"<cmd>AsyncTask project-run<cr>"   , "run project"},
		x = {"<cmd>cclose<cr>"                  , "close task view"},
	},

	l = {
		name = "+lsp"                                    ,
		d = {"<cmd>lua vim.lsp.buf.definition()<cr>"     , "definition"},
		i = {"<cmd>lua vim.lsp.buf.implementation()<cr>" , "implementation"},
		s = {"<cmd>lua vim.lsp.buf.signature_help()<cr>" , "signature_help"},
		R = {"<cmd>lua vim.lsp.buf.references()<cr>"     , "references"},
		r = {"<cmd>lua vim.lsp.buf.rename()<cr>"         , "rename"},
		h = {"<cmd>lua vim.lsp.buf.hover()<cr>"          , "hover"},
		c = {"<cmd>lua vim.lsp.buf.code_action()<cr>"    , "code_action"},
	},

	p = {
		name = "+project" ,
		t = {"<cmd>MakeTags<cr>" , "make tags"},
	},

	r = {
		name = "+run",
		p = {"<cmd>FloatermNew python %<cr>", "run python"},
		n = {"<cmd>FloatermNew node %<cr>", "run nodejs"},
	},

	s = {
		name = "+search"                     ,
		["/"] = {"<cmd>History/<cr>"         , "history"},
		[";"] = {"<cmd>Commands<cr>"         , "commands"},
		a     = {"<cmd>Ag<cr>"               , "text Ag"},
		c     = {"<cmd>Commits<cr>"          , "commits"},
		C     = {"<cmd>BCommits<cr>"         , "buffer commits"},
		h     = {"<cmd>History<cr>"          , "file history"},
		H     = {"<cmd>History:<cr>"         , "command history"},
		l     = {"<cmd>Lines<cr>"            , "lines"} ,
		m     = {"<cmd>Marks<cr>"            , "marks"} ,
		M     = {"<cmd>Maps<cr>"             , "normal maps"} ,
		p     = {"<cmd>Helptags<cr>"         , "help tags"} ,
		P     = {"<cmd>Tags<cr>"             , "project tags"},
		s     = {"<cmd>CocList snippets<cr>" , "snippets"},
		S     = {"<cmd>Colors<cr>"           , "color schemes"},
		t     = {"<cmd>Rg<cr>"               , "text Rg"},
		T     = {"<cmd>BTags<cr>"            , "buffer tags"},
		w     = {"<cmd>Windows<cr>"          , "search windows"},
		y     = {"<cmd>Filetypes<cr>"        , "file types"},
		z     = {"<cmd>FZF<cr>"              , "FZF"},
	},

	S = {
		name = "+Session"               ,
		c = {"<cmd>SClose<cr>"          , "Close Session"},
		d = {"<cmd>SDelete<cr>"         , "Delete Session"},
		l = {"<cmd>SLoad<cr>"           , "Load Session"},
		s = {"<cmd>Startify<cr>"        , "Start Page"},
		S = {"<cmd>SSave<cr>"           , "Save Session"}
	},

	o = {
		name = "+open"              ,
		o    = {"<cmd>Explore<cr>"  , "open netrw"},
		t    = {"<cmd>Rexplore<cr>" , "open/close netrw"},
	},

	t = {
		name  = "+terminal"                                          ,
		[";"] = {"<cmd>FloatermNew --wintype=normal --height=15<cr>" , "terminal"},
		f     = {"<cmd>FloatermNew fzf<cr>"                          , "fzf"},
		g     = {"<cmd>FloatermNew lazygit<cr>"                      , "git"},
		d     = {"<cmd>FloatermNew lazydocker<cr>"                   , "docker"},
		n     = {"<cmd>FloatermNew node<cr>"                         , "node"},
		p     = {"<cmd>FloatermNew ipython<cr>"                      , "ipython"},
		m     = {"<cmd>FloatermNew lazynpm<cr>"                      , "npm"},
		r     = {"<cmd>FloatermNew ranger<cr>"                       , "ranger"},
		t     = {"<cmd>FloatermToggle<cr>"                           , "toggle"},
		y     = {"<cmd>FloatermNew bashtop<cr>"                      , "bashtop"},
		s     = {"<cmd>FloatermNew ncdu<cr>"                         , "ncdu"},
		v     = {"<cmd>FloatermNew vifm<cr>"                         , "vifm"},
	},

	T = {
		name = "+tabline"                     ,
		b    = {"<cmd>XTabListBuffers<cr>"    , "list buffers"},
		d    = {"<cmd>XTabCloseBuffer<cr>"    , "close buffer"},
		D    = {"<cmd>XTabDeleteTab<cr>"      , "close tab"},
		h    = {"<cmd>XTabHideBuffer<cr>"     , "hide buffer"},
		i    = {"<cmd>XTabInfo<cr>"           , "info"},
		l    = {"<cmd>XTabLock<cr>"           , "lock tab"},
		m    = {"<cmd>XTabMode<cr>"           , "toggle mode"},
		n    = {"<cmd>tabNext<cr>"            , "next tab"},
		N    = {"<cmd>XTabMoveBufferNext<cr>" , "buffer->"},
		t    = {"<cmd>tabnew<cr>"             , "new tab"},
		p    = {"<cmd>tabprevious<cr>"        , "prev tab"},
		P    = {"<cmd>XTabMoveBufferPrev<cr>" , "<-buffer"},
		x    = {"<cmd>XTabPinBuffer<cr>"      , "pin buffer"},
	},

	w = {
		name  = "+windows"            ,
		w     = {"<C-W>w"             , "other-window"},
		d     = {"<C-W>c"             , "delete-window"},
		["2"] = {"<C-W>v"             , "layout-double-columns"},
		h     = {"<C-W>h"             , "window-left"},
		j     = {"<C-W>j"             , "window-below"},
		l     = {"<C-W>l"             , "window-right"},
		k     = {"<C-W>k"             , "window-up"},
		H     = {"<C-W>5<"            , "expand-window-left"},
		J     = {"<cmd>resize +5<cr>" , "expand-window-below"},
		L     = {"<C-W>5>"            , "expand-window-right"},
		K     = {"<cmd>resize -5<cr>" , "expand-window-up"},
		["="] = {"<C-W>="             , "balance-window"},
		s     = {"<C-W>s"             , "split-window-below"},
		v     = {"<C-W>v"             , "split-window-right"},
		f     = {"Windows"            , "fzf-window"},
	},
}, { prefix = "<leader>" })
EOF
