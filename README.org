#+title: Dotfiles

#+property: header-args :mkdirp yes
#+property: header-args:shell :tangle-mode (identity #o555)
#+property: header-args:conf :tangle-mode (identity #o555)

* Table of Contents :toc_2:
- [[#waybar][Waybar]]
  - [[#waybar-config][waybar config]]
  - [[#waybar-style][waybar style]]
- [[#sway][Sway]]
  - [[#variables][Variables]]
  - [[#output-configuration][Output configuration]]
  - [[#idle][Idle]]
  - [[#input-configuration][Input configuration]]
  - [[#key-bindings][Key bindings]]
  - [[#status-bar][Status Bar:]]
  - [[#gaps][Gaps]]
  - [[#borders][Borders]]
  - [[#open-specific-applications-in-floating-mode][Open specific applications in floating mode]]
  - [[#colors][Colors]]
  - [[#themes][Themes]]
  - [[#cursor][Cursor]]
  - [[#transparency][Transparency]]
  - [[#support-java-apps][Support Java apps]]
  - [[#autostart-apps][Autostart apps]]
  - [[#include][Include]]
- [[#mpv][Mpv]]
  - [[#mpv-config][mpv config]]
  - [[#mpv-input][mpv input]]
- [[#zsh][Zsh]]
  - [[#zshrc][zshrc]]
  - [[#zsh-theme][zsh-theme]]
  - [[#zshenv][zshenv]]
- [[#terminal][Terminal]]
  - [[#alacritty][Alacritty]]
- [[#ideavimrc][Ideavimrc]]
  - [[#general][General]]
  - [[#which-key-plugin][Which-Key Plugin]]
- [[#git][Git]]
  - [[#gitconfig][gitconfig]]
  - [[#gitignore_global][gitignore_global]]
- [[#firefox][Firefox]]

* Waybar
** waybar config

#+begin_src conf :tangle ~/.config/waybar/config
{
    // "layer": "top", // Waybar at top layer
    "position": "top", // Waybar position (top|bottom|left|right)
    "height": 24, // Waybar height (to be removed for auto height)
    // "width": 1280, // Waybar width
    // Choose the order of the modules
    "modules-left": [
        "disk",
        "custom/hdd",
        "custom/separator",
        "cpu",
        "temperature",
        "custom/separator",
        "memory",
        "custom/separator",
        "pulseaudio",
        "custom/separator",
        "network",
        "sway/mode",
    ],
    "modules-center": ["sway/workspaces"],
    "modules-right": [
        "custom/update",
        "custom/separator",
        "sway/language",
        "custom/separator",
        "clock",
        "custom/separator",
        "tray"
    ],
    // Modules configuration
    "sway/workspaces": {
        "disable-scroll": true,
        "all-outputs": true,
        "format": "{icon}",
        "format-icons": {
            "1": "",
            "2": "",
            "3": "",
            "4": "",
            "5": "",
            "urgent": "",
            "focused": "",
            "default": ""
        }
    },
    "sway/language": {
        "format": "{}",
    },
    "sway/mode": {
        "format": "<span style=\"italic\">{}</span>"
    },
    "tray": {
        "icon-size": 18,
        "spacing": 10
    },
    "clock": {
        "timezone": "Europe/Moscow",
        "format": "{: %A, %d %B |  %H:%M}",
        "tooltip": false,
    },
    "cpu": {
        "format": " {usage}%",
        "tooltip": false
    },
    "memory": {
        "format":  " {used:0.2f} GiB"
    },
    "temperature": {
        // "thermal-zone": 2,
        "hwmon-path": "/sys/class/hwmon/hwmon1/temp1_input",
        "critical-threshold": 80,
        "format-critical": "{icon} {temperatureC}°C",
        "format": "{icon} {temperatureC}°C",
        "format-icons": ["", "", ""]
    },
    "network": {
        // "interface": "wlp2*", // (Optional) To force the use of this interface
        //"format-wifi": "{essid} ({signalStrength}%) ",
        //"format-ethernet": "{ifname}: {ipaddr}/{cidr} ",
        "format-ethernet": "",
        "format-linked": "{ifname} (No IP) ",
        "format-disconnected": "Disconnected ⚠",
        "format-alt": "{ifname}: {ipaddr}/{cidr}"
    },
    "pulseaudio": {
        // "scroll-step": 1, // %, can be a float
        "format": "{icon} {volume}% {format_source}",
        "format-bluetooth": "{icon} {volume}% {format_source}",
        "format-bluetooth-muted": " {icon} {format_source}",
        "format-muted": " {format_source}",
        "format-source": " {volume}%",
        "format-source-muted": "",
        "format-icons": {
            "headphone": "",
            "hands-free": "",
            "headset": "",
            "phone": "",
            "portable": "",
            "car": "",
            "default": ["", "", ""]
        },
        "on-click": "pavucontrol"
    },
    "disk": {
        "interval": 30,
        "format": " {free}",
        "path": "/"
    },
    "custom/hdd": {
        "interval": 30,
        "format": " {}iB",
        "exec": "df -H /run/media/solus/hdd | awk '{print $4}' | cut -d $'\n' -f 2"
    },
    "custom/separator": {
        "format": "|",
        "interval": "once",
        "tooltip": false
    },
    "custom/update": {
        "format": " {}",
        "interval": 3600,
        "exec-if": "[ $(checkupdates | wc -l) -ne 0 ]",
        "exec": "checkupdates | wc -l"
    }
}
#+end_src

** waybar style

#+begin_src css :tangle ~/.config/waybar/style.css
*{
    border: none;
    border-radius: 0;
    /* `otf-font-awesome` is required to be installed for icons */
    /* font-family: "Font Awesome 5 Free", "JetBrains Mono"; */
    font-family: "Source Code Pro";
    /*font-family: monospace;*/
    font-size: 14px;
    min-height: 0;
    background-color: #282c34;
}

window#waybar {
    background-color: #282c34;
    transition-property: background-color;
    transition-duration: .5s;
}

#workspaces button {
    padding: 0 7px;
    color: #e1d9c4;
}

/* https://github.com/Alexays/Waybar/wiki/FAQ#the-workspace-buttons-have-a-strange-hover-effect */
#workspaces button:hover {
    background: #282c34;
	box-shadow: inherit;
	text-shadow: inherit;
}

#workspaces button.focused {
	color: #bc8420;
}

#workspaces button.urgent {
    color: #eb4d4b;
}

#mode {
    background-color: #64727D;
}

#clock,
#battery,
#cpu,
#memory,
#disk,
#custom-hdd,
#temperature,
#network,
#pulseaudio,
#custom-media,
#custom-update,
#tray,
#mode,
#idle_inhibitor,
#language,
#mpd {
    padding: 0 7px;
    color: #e1d9c4;
    background-color: #282c34;
}

#window,
#workspaces {
    margin: 0 4px;
}

/* If workspaces is the leftmost module, omit left margin */
.modules-left > widget:first-child > #workspaces {
    margin-left: 0;
}

/* If workspaces is the rightmost module, omit right margin */
.modules-right > widget:last-child > #workspaces {
    margin-right: 0;
}

@keyframes blink {
    to {
        background-color: #ffffff;
        color: #000000;
    }
}

#temperature.critical {
    color: #f53c3c;
}

label:focus {
    background-color: #000000;
}

#tray > .needs-attention {
    -gtk-icon-effect: highlight;
    background-color: #eb4d4b;
}

#keyboard-state {
    padding: 0 0px;
    margin: 0 5px;
    min-width: 16px;
}

#keyboard-state > label {
    padding: 0 5px;
}

#keyboard-state > label.locked {
    background: rgba(0, 0, 0, 0.2);
}

#custom-separator {
    color: #e1d9c4;
}
#+end_src

* Sway
** Variables

#+begin_src conf :tangle ~/.config/sway/config
# Logo key. Use Mod1 for Alt.
set $mod Mod4
set $alt Mod1
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
set $term alacritty
# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
set $menu dmenu_path | wofi --show drun -I | xargs swaymsg exec --
#+end_src

** Output configuration

#+begin_src conf :tangle ~/.config/sway/config
# Default wallpaper (more resolutions are available in /usr/share/backgrounds/sway/)
#output * bg `find /run/media/solus/hdd/Pictures/wallpapers -type f | shuf -n 1` fill
output * bg /run/media/solus/hdd/Pictures/wallpapers/18.jpg fill

#
# Example configuration:
#
#output VGA-1 resolution 1920x1080 position 1920,0
#output LVDS-1 disable
#+end_src

** Idle

#+begin_src conf :tangle ~/.config/sway/config
# Example configuration:
#
# exec swayidle -w \
#          timeout 300 'swaylock -f -c 000000' \
#          timeout 600 'swaymsg "output * dpms off"' resume 'swaymsg "output * dpms on"' \
#          before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.
#+end_src

** Input configuration

#+begin_src conf :tangle ~/.config/sway/config
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.
input * {
    xkb_layout us,ru
    xkb_options grp:alt_shift_toggle,grp_led:scroll,caps:swapescape
}
#+end_src

** Key bindings
*** Basics

#+begin_src conf :tangle ~/.config/sway/config
# Start a terminal
bindsym $mod+Return exec $term

# Kill focused window
bindsym $mod+Shift+q kill

# Start your launcher
bindsym $mod+d exec $menu

# Drag floating windows by holding down $mod and left mouse button.
# Resize them with right mouse button + $mod.
# Despite the name, also works for non-floating windows.
# Change normal to inverse to use left mouse button for resizing and right
# mouse button for dragging.
floating_modifier $mod normal

# Reload the configuration file
bindsym $mod+Shift+c reload

# Exit sway (logs you out of your Wayland session)
bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -b 'Yes, exit sway' 'swaymsg exit'
#+end_src

*** Moving around

#+begin_src conf :tangle ~/.config/sway/config
# Move your focus around
bindsym $alt+$left focus left
bindsym $alt+$down focus down
bindsym $alt+$up focus up
bindsym $alt+$right focus right

# Move the focused window with the same, but add Shift
bindsym $mod+Shift+$left move left
bindsym $mod+Shift+$down move down
bindsym $mod+Shift+$up move up
bindsym $mod+Shift+$right move right
#+end_src

*** Workspaces

#+begin_src conf :tangle ~/.config/sway/config
# Switch to workspace
bindsym $mod+1 workspace number 1
bindsym $mod+2 workspace number 2
bindsym $mod+3 workspace number 3
bindsym $mod+4 workspace number 4
bindsym $mod+5 workspace number 5
bindsym $mod+6 workspace number 6
bindsym $mod+7 workspace number 7
bindsym $mod+8 workspace number 8
bindsym $mod+9 workspace number 9
# Move focused container to workspace
bindsym $mod+Shift+1 move container to workspace number 1
bindsym $mod+Shift+2 move container to workspace number 2
bindsym $mod+Shift+3 move container to workspace number 3
bindsym $mod+Shift+4 move container to workspace number 4
bindsym $mod+Shift+5 move container to workspace number 5
bindsym $mod+Shift+6 move container to workspace number 6
bindsym $mod+Shift+7 move container to workspace number 7
bindsym $mod+Shift+8 move container to workspace number 8
bindsym $mod+Shift+9 move container to workspace number 9
# Note: workspaces can have any name you want, not just numbers.
# We just use 1-10 as the default.

#navigate workspaces next / previous
bindsym $alt+n workspace next
bindsym $alt+p workspace prev

# workspace back and forth (with/without active container)
workspace_auto_back_and_forth yes
bindsym $mod+Tab workspace back_and_forth
bindsym $mod+Shift+b move container to workspace back_and_forth; workspace back_and_forth
#+end_src

*** Layout stuff

#+begin_src conf :tangle ~/.config/sway/config
# You can "split" the current object of your focus with
# $mod+b or $mod+v, for horizontal and vertical splits
# respectively.
bindsym $mod+b splith
bindsym $mod+v splitv

# Switch the current container between different layout styles
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# Make the current focus fullscreen
bindsym $mod+f fullscreen

# Toggle the current focus between tiling and floating mode
bindsym $mod+Shift+space floating toggle

# Swap focus between the tiling area and the floating area
bindsym $mod+space focus mode_toggle

# Move focus to the parent container
bindsym $mod+a focus parent
#+end_src

*** Scratchpad

#+begin_src conf :tangle ~/.config/sway/config
# Sway has a "scratchpad", which is a bag of holding for windows.
# You can send windows there and get them back later.

# Move the currently focused window to the scratchpad
bindsym $mod+Shift+minus move scratchpad

# Show the next scratchpad window or hide the focused scratchpad window.
# If there are multiple scratchpad windows, this command cycles through them.
bindsym $mod+minus scratchpad show
#+end_src

*** Resizing containers

#+begin_src conf :tangle ~/.config/sway/config
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"
#+end_src

*** Audio controls

#+begin_src conf :tangle ~/.config/sway/config
bindsym $mod+F2 exec --no-startup-id pactl set-sink-volume 0 -2%
bindsym $mod+F3 exec --no-startup-id pactl set-sink-volume 0 +2%
bindsym $mod+F4 exec --no-startup-id pactl set-sink-mute 0 toggle
#+end_src

*** Launch apps 

#+begin_src conf :tangle ~/.config/sway/config
# Emacs
bindsym $alt+e exec --no-startup-id emacsclient -c

# Slide show in fullscreen instead of lock screen
bindsym $alt+f exec --no-startup-id imv -f -t 10 /run/media/solus/hdd/Pictures/wallpapers

# IDEA
bindsym $alt+i exec --no-startup-id ~/idea/bin/idea.sh
#+end_src

*** Take screenshots

#+begin_src conf :tangle ~/.config/sway/config
# Whole screen
bindsym $mod+F12 exec grim

# Current window
bindsym $mod+Shift+F12 exec grim -g "$(swaymsg -t get_tree | jq -r '.. | select(.focused?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"')"

# Part of the screen:
bindsym $mod+F11 exec grim -g "$(slurp)"
#+end_src

*** Set shut down, restart and suspend features

#+begin_src conf :tangle ~/.config/sway/config
set $mode_system System (s) suspend, (r) reboot, (Shift+s) shutdown
mode "$mode_system" {
    bindsym s exec --no-startup-id systemctl suspend, mode "default"
    bindsym r exec --no-startup-id systemctl reboot, mode "default"
    bindsym Shift+s exec --no-startup-id systemctl poweroff -i, mode "default"

    # back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
  }
bindsym $mod+0 mode "$mode_system"
#+end_src

** Status Bar:

#+begin_src conf :tangle ~/.config/sway/config
# Read `man 5 sway-bar` for more information about this section.
bar {
    swaybar_command waybar
}
#+end_src

** Gaps

#+begin_src conf :tangle ~/.config/sway/config
gaps inner 10
gaps outer 4
smart_gaps on
#+end_src

** Borders

#+begin_src conf :tangle ~/.config/sway/config
default_border pixel
smart_borders on
for_window [tiling] border pixel 2
#+end_src

** Open specific applications in floating mode

#+begin_src conf :tangle ~/.config/sway/config
for_window [app_id="transmission-gtk"] floating enable
#for_window [class="GParted"] floating enable border normal
#+end_src

** Colors

#+begin_src conf :tangle ~/.config/sway/config
# class                   border  backgr. indic.   child_border
  client.focused          #556064 #556064 #FDF6E3
  client.focused_inactive #2F3D44 #2F3D44 #454948
  client.unfocused        #282c34 #282c34 #454948
#+end_src

** Themes

#+begin_src conf :tangle ~/.config/sway/config
set $gnome-schema org.gnome.desktop.interface

exec_always {
    gsettings set $gnome-schema gtk-theme 'Arc-Dark'
    gsettings set $gnome-schema icon-theme 'Papirus-Dark'
    # gsettings set $gnome-schema cursor-theme 'Your cursor Theme'
    # gsettings set $gnome-schema font-name 'Your font name'
}
#+end_src

** Cursor

#+begin_src conf :tangle ~/.config/sway/config
seat * hide_cursor 1000
#+end_src

** Transparency

#+begin_src conf :tangle ~/.config/sway/config
set $opacity 0.93
for_window [class="Emacs"] opacity $opacity
#for_window [class="jetbrains-idea-ce"] opacity $opacity
for_window [app_id="Alacritty"] opacity $opacity
#+end_src

** Support Java apps

#+begin_src conf :tangle ~/.config/sway/config
exec wmname LG3D
#+end_src

** Autostart apps

#+begin_src conf :tangle ~/.config/sway/config
exec --no-startup-id /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
#exec --no-startup-id emacs --daemon

# exec --no-startup-id "sleep 1; swaymsg 'workspace 2; exec emacs'"
# exec --no-startup-id "sleep 5; swaymsg 'workspace 4; exec firefox'"
# exec --no-startup-id "sleep 10; swaymsg 'workspace 5; exec telegram-desktop'"
#+end_src

** Include

#+begin_src conf :tangle ~/.config/sway/config
include /etc/sway/config.d/*
#+end_src

* Mpv
** mpv config

#+begin_src conf :tangle ~/.config/mpv/config
save-position-on-quit=yes
fullscreen=no
hwdec=vdpau
subcp=enca:ru:utf8
profile=opengl-hq
#+end_src

** mpv input

#+begin_src conf :tangle ~/.config/mpv/input.conf
UP    add volume  1
DOWN  add volume -1

n playlist-next
< playlist-prev

9 seek -60
0 seek 60

# switch audio streams
l cycle audio             

# toggle fullscreen
ENTER cycle fullscreen
#+end_src

* Zsh
** zshrc

#+begin_src sh :tangle ~/.zshrc
# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
ZSH_CUSTOM="$HOME/.oh-my-zsh/custom"
ZSH_THEME="wezm"

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.

plugins=(
	git
	zsh-syntax-highlighting
	history-substring-search
	zsh-autosuggestions
	poetry
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
# 	export EDITOR='vim'
# else
# 	export EDITOR='nvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.


#######################################################################3

# arch
alias i='sudo pacman -S'
alias remove='sudo pacman -Rs'
alias upd='sudo pacman -Syu && yay -Sua'
alias yupd='yay -Syu'
alias cl='sudo pacman -Scc'

alias c='clear && colorscript random'

alias q='exit'

alias t='touch'
alias mk='mkdir'

alias rb='reboot'
alias sdn='shutdown now'
alias sdh='shutdown -h'
alias sdc='shutdown -c'
alias sn='sleep 2099 && shutdown now' # 34 min 59 sec

alias ss='systemctl suspend'
# 3600 == one hour
alias s30='sleep 1800 && systemctl suspend'
alias s45='sleep 2700 && systemctl suspend'
alias s1='sleep 3600 && systemctl suspend'
alias s2='sleep 7200 && systemctl suspend'
alias s3='sleep 10800 && systemctl suspend'

# python
alias pp='pyenv activate python-pyenv'
alias py='python3'
# alias ipy='ipython'
alias ipy='python -m IPython'
# alias ipy='pyenv activate python-pyenv && ipython'

# poetry
alias rmp='rm -rf `poetry env info -p`'

# django
alias dsp='django-admin startproject'
alias dsa='python manage.py startapp'
alias drs='python manage.py runserver'
alias dm='python manage.py migrate'
alias dmm='python manage.py makemigrations'
alias ds='python manage.py shell'

# git
alias gts='git status'
alias gta='git add .'
alias gtc='git commit -m'
alias gtp='git push origin'

#######################################################################

export TERM=xterm-256color

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
	eval "$(pyenv init --path)"
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# turf off highlighting directories are writable by other
export LS_COLORS="$LS_COLORS:ow=1;34:tw=1;34:"

# poetry
source $HOME/.poetry/env

# Java
export JAVA_HOME="/usr/lib/jvm/java-11-openjdk"
# export JAVA_HOME="/usr/lib/jvm/java-8-openjdk"
export PATH="$JAVA_HOME/bin:$PATH"
#+end_src

** zsh-theme

#+begin_src conf :tangle ~/.oh-my-zsh/custom/themes/wezm.zsh-theme
PROMPT='$(git_prompt_info)%(?,,%{${fg_bold[white]}%}[%?]%{$reset_color%} )%{$fg[yellow]%}>%{$reset_color%} '
RPROMPT='%{$fg[green]%}%~%{$reset_color%}'

ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg[blue]%}("
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%} "
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[blue]%})%{$fg[red]%}⚡%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[blue]%})"
#+end_src

** zshenv

#+begin_src sh :tangle ~/.zshenv
if [ "$(tty)" = "/dev/tty1" ]; then
    #unset DISPLAY
# if [[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]]; then
	exec sway
fi

. "$HOME/.cargo/env"
#+end_src

* Terminal
** Alacritty

#+begin_src yaml :tangle ~/.config/alacritty.yml
scrolling:
  history: 10000

font:
  normal:
    family: Source Code Pro
  size: 9.5

colors:
  primary:
    background: '#282c34'
    foreground: '#d8d8d8'

  cursor:
    text: '#000000'
    cursor: '#1ABB9B'

  selection:
    text: CellBackground
    background: CellForeground

  search:
    matches:
      foreground: '#000000'
      background: '#ffffff'

    bar:
      background: '#c5c8c6'
      foreground: '#1d1f21'

  # Normal colors
  normal:
    black:   '#1d1f21'
    #red:     '#cc6666'
    #green:   '#b5bd68'
    red:     '#ef5240'
    green:   '#fabd2f'
    yellow:  '#f0c674'
    blue:    '#81a2be'
    magenta: '#b294bb'
    cyan:    '#8abeb7'
    white:   '#c5c8c6'

  # Bright colors
  bright:
    black:   '#666666'
    red:     '#d54e53'
    green:   '#b9ca4a'
    yellow:  '#e7c547'
    blue:    '#7aa6da'
    magenta: '#c397d8'
    cyan:    '#70c0b1'
    white:   '#eaeaea'

  # Dim colors
  #
  # If the dim colors are not set, they will be calculated automatically based
  # on the `normal` colors.
  dim:
    black:   '#131415'
    red:     '#864343'
    green:   '#777c44'
    yellow:  '#9e824c'
    blue:    '#556a7d'
    magenta: '#75617b'
    cyan:    '#5b7d78'
    white:   '#828482'
#+end_src

* Ideavimrc
** General

#+begin_src vimrc :tangle ~/.ideavimrc
set ideajoin
set number relativenumber

" <SPC> as the leader key
let mapleader = " "

" Use the clipboard register '*' for all yank, delete, change and put operations
" which would normally go to the unnamed register.
set clipboard+=unnamed

" Search as characters are entered
set incsearch

" Highlight search results
set hlsearch

" If a pattern contains an uppercase letter, searching is case sensitive,
" otherwise, it is not.
set ignorecase
set smartcase

" Emulate vim-surround. Commands: ys, cs, ds, S.
set surround
#+end_src

** Which-Key Plugin
*** General

:TODO: fix move lines in selected mode

#+begin_src vimrc :tangle ~/.ideavimrc
set which-key

"set timeoutlen=5000
set notimeout

let g:WhichKey_DefaultDelay = 1000

let g:WhichKey_ShowVimActions = "true"

nnoremap <leader><Esc> :<Esc>

" Move lines down
nnoremap <S-j>    $:action MoveLineDown<CR>
" xnoremap <S-j>    $:action MoveStatementDown<CR>>gv=gv

" Move lines up
nnoremap <S-k>    $:action MoveLineUp<CR>
" xnoremap <S-k>    $:action MoveStatementUp<CR>gv=gv
#+end_src

*** Buffers

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_buffers = "<leader>b +buffers"

let g:WhichKeyDesc_buffers_last_buffer = "<leader>bl switch to last buffer"
nnoremap <leader>bl <C-S-6>

let g:WhichKeyDesc_buffers_next_buffer = "<leader>bn next buffer"
nnoremap <leader>bn :action NextTab<CR>

let g:WhichKeyDesc_buffers_previous_buffer = "<leader>bp previous buffer"
nnoremap <leader>bp :action PreviousTab<CR>

let g:WhichKeyDesc_buffers_bill_buffer = "<leader>bd kill buffer"
nnoremap <leader>bd :action CloseContent<CR>

let g:WhichKeyDesc_buffers_kill_buffer_and_close_window = "<leader>bk kill buffer and close window"
nnoremap <leader>bk :action CloseAllEditors<CR>

let g:WhichKeyDesc_buffers_copy_buffer = "<leader>bY copy buffer"
nnoremap <leader>bY :%y<CR>

let g:WhichKeyDesc_buffers_kill_other_buffers = "<leader>b<C-d> kill other buffers"
nnoremap <leader>b<C-d> :action CloseAllEditorsButActive<CR>

nnoremap <leader>b<Esc> :<Esc>
#+end_src

*** Code

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_code = "<leader>c +code"

let g:WhichKeyDesc_code_override_method = "<leader>co override method"
nnoremap <leader>co :action OverrideMethods<CR>

let g:WhichKeyDesc_code_reformat = "<leader>cr reformat code"
nnoremap <leader>cr :action ReformatCode<CR>

nnoremap <leader>c<Esc> :<Esc>
#+end_src

**** Comments

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_code_comments = "<leader>cc +comments"

let g:WhichKeyDesc_code_comments_collapse_region = "<leader>ccr collapse region"
nnoremap <leader>ccr :action CollapseRegion<CR>

let g:WhichKeyDesc_code_comments_expand_region = "<leader>cce expand region"
nnoremap <leader>cce :action ExpandRegion<CR>
#+end_src

**** Generate

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_code_generate = "<leader>cg +generate"

let g:WhichKeyDesc_code_generate_constructor = "<leader>cge generate constructor"
nnoremap <leader>cgc :action GenerateEquals<CR>

let g:WhichKeyDesc_code_generate_getter = "<leader>cgg generate getter"
nnoremap <leader>cgg :action GenerateGetter<CR>

let g:WhichKeyDesc_code_generate_setter = "<leader>cgs generate setter"
nnoremap <leader>cgs :action GenerateSetter<CR>

let g:WhichKeyDesc_code_generate_equals = "<leader>cge generate equals"
nnoremap <leader>cge :action GenerateEquals<CR>

let g:WhichKeyDesc_code_generate_javadoc = "<leader>cge generate javadoc"
nnoremap <leader>cgd :action GenerateJavadoc<CR>
#+end_src

**** Jump

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_code_jump = "<leader>cj +jump"

let g:WhichKeyDesc_code_jump_to_last_change = "<leader>cjc to last change"
nnoremap <leader>cjc :action JumpToLastChange<CR>

let g:WhichKeyDesc_code_jump_to_last_window = "<leader>cjw to last window"
nnoremap <leader>cjw :action JumpToLastWindow<CR>
#+end_src

**** Quick Actions

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_code_quick_actions = "<leader>ca +quick actions"

let g:WhichKeyDesc_code_quick_actions_quick = "<leader>caq quick actions"
nnoremap <leader>caq :action QuickActions<CR>

let g:WhichKeyDesc_code_quick_actions_java_doc = "<leader>caj quick java doc"
nnoremap <leader>caj :action QuickJavaDoc<CR>
#+end_src

*** Debugging

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_debug = "<leader>d +debugging"

let g:WhichKeyDesc_debug_toggle_line_breakpoint = "<leader>db toggle line breakpoint"
nnoremap <leader>db :action ToggleLineBreakpoint<CR>

let g:WhichKeyDesc_debug_toggle_between_impl_and_test_file = "<leader>di toggle between impl and test file"
nnoremap <leader>di :action GotoTest<CR>

nnoremap <leader>d<Esc> :<Esc>
#+end_src

*** Files

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_files = "<leader>f +files"

let g:WhichKeyDesc_files_goto_file = "<leader>fg find file"
nnoremap <leader>fg :action GotoFile<CR>

let g:WhichKeyDesc_files_rename = "<leader>fR rename file"
nnoremap <leader>fR :action RenameFile<CR>

let g:WhichKeyDesc_files_recent = "<leader>fr recent file"
nnoremap <leader>fr :action RecentFiles<CR>

let g:WhichKeyDesc_files_yank_copy = "<leader>fy +Yank/Copy"

let g:WhichKeyDesc_files_yank_copy_file_path = "<leader>fyy copy file path"
nnoremap <leader>fyy :action CopyAbsolutePath<CR>

nnoremap <leader>f<Esc> :<Esc>
#+end_src

**** Open

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_files_open = "<leader>fo +open"

let g:WhichKeyDesc_files_menu = "<leader>fom file menu"
nnoremap <leader>fom :action FileMenu<CR>

let g:WhichKeyDesc_files_open_file = "<leader>fof open file"
nnoremap <leader>fo :action OpenFile<CR>

let g:WhichKeyDesc_files_open_in_browser = "<leader>fob open in browser"
nnoremap <leader>fob :action OpenInBrowser<CR>
#+end_src

**** New Files

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_files_languages = "<leader>fn +new files"

let g:WhichKeyDesc_files_new_file = "<leader>fnf new file"
nnoremap <leader>fnf :action NewFile<CR>

let g:WhichKeyDesc_files_new_java_class = "<leader>fnc new java class"
nnoremap <leader>fnc :action NewClass<CR>

let g:WhichKeyDesc_files_new_html_file = "<leader>fnh new html file"
nnoremap <leader>fnh :action NewHtmlFile<CR>

let g:WhichKeyDesc_files_new_js_file = "<leader>fnj new js file"
nnoremap <leader>fnj :action NewJavaScriptFile<CR>

let g:WhichKeyDesc_files_new_python_file = "<leader>fnp new python file"
nnoremap <leader>fnp :action NewPythonFile<CR>
#+end_src

*** Git

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_git = "<leader>g +git"

" let g:WhichKeyDesc_code_comments_collapse_region = "<leader>ccr collapse region"
" nnoremap <leader>ccr :action CollapseRegion<CR>

nnoremap <leader>g<Esc> :<Esc>
#+end_src

*** Projects

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_projects = "<leader>p +projects"

let g:WhichKeyDesc_projects_new_dir = "<leader>pd new dir"
nnoremap <leader>pd :action NewDir<CR>

let g:WhichKeyDesc_projects_next_project_window = "<leader>pn next project window"
nnoremap <leader>pn :action NextProjectWindow<CR>

let g:WhichKeyDesc_projects_previous_project_window = "<leader>pp previous project window"
nnoremap <leader>pp :action PreviousProjectWindow<CR>

let g:WhichKeyDesc_projects_close_project = "<leader>pc close project"
nnoremap <leader>pc :action CloseProject<CR>

let g:WhichKeyDesc_projects_tasks = "<leader>pt +tasks"

nnoremap <leader>p<Esc> :<Esc>
#+end_src

*** Toggle/Open

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_toggle_open = "<leader>t +toggle/open"

let g:WhichKeyDesc_toggle_open_terminal = "<leader>tt +terminal"

let g:WhichKeyDesc_toggle_open_new_terminal = "<leader>ttn open new terminal"
nnoremap <leader>ttn :action Terminal.OpenInTerminal<CR>

let g:WhichKeyDesc_toggle_activate_terminal = "<leader>tto activate terminal"
nnoremap <leader>tto :action ActivateTerminalToolWindow<CR>

" Focus on project window.
" Sadly when you are inside the project window this key binding does not work
" anymore. You can use <A-1> if you want to close the window or <Esc> if you
" want to leave the window opened and focus on the code.
let g:WhichKeyDesc_toggle_open_project_tool_window = "<leader>tp project tool window"
nnoremap <leader>tp :action ActivateProjectToolWindow<CR>

nnoremap <leader>t<Esc> :<Esc>
#+end_src

*** Run

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_run = "<leader>r +run"

let g:WhichKeyDesc_run_menu = "<leader>rm run menu"
nnoremap <leader>rm :action RunMenu<CR>

let g:WhichKeyDesc_run_run = "<leader>rr run"
nnoremap <leader>rr :action Run<CR>

let g:WhichKeyDesc_run_java_class = "<leader>rc run java class"
nnoremap <leader>rc :action RunClass<CR>

nnoremap <leader>r<Esc> :<Esc>
#+end_src

*** Search

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_search = "<leader>s +search"

let g:WhichKeyDesc_search_clear_highlight = "<leader>sc clear highlight"
nnoremap <leader>sc :nohlsearch<CR>

let g:WhichKeyDesc_search_find_usages = "<leader>sP find usages"
nnoremap <leader>sP :action FindUsages<CR>

nnoremap <leader>s<Esc> :<Esc>
#+end_src

*** IDE

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_settings = "<leader>i +IDE"

let g:WhichKeyDesc_settings_show_settings = "<leader>is show settings"
nnoremap <leader>is :action ShowSettings<CR>

let g:WhichKeyDesc_settings_show_key_bindings = "<leader>ik show key bindings"
nnoremap <leader>ik :map<CR>

let g:WhichKeyDesc_toggle_open_main = "<leader>im +main"

let g:WhichKeyDesc_toggle_open_main_menu = "<leader>imm open main menu"
nnoremap <leader>imm :action MainMenu<CR>

let g:WhichKeyDesc_toggle_open_main_toolbar = "<leader>imt open main toolbar"
nnoremap <leader>imt :action MainToolBar<CR>

nnoremap <leader>i<Esc> :<Esc>
#+end_src

**** Menu

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_settings_menu = "<leader>im +tools"

let g:WhichKeyDesc_settings_menu_view = "<leader>imv view menu"
nnoremap <leader>imv :action ViewMenu<CR>

let g:WhichKeyDesc_settings_menu_tools = "<leader>imt tools menu"
nnoremap <leader>imt :action ToolsMenu<CR>
#+end_src

*** Windows

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_windows = "<leader>w +windows"

let g:WhichKeyDesc_windows_delete_window = "<leader>wc close window"
nnoremap <leader>wc :action CloseAllEditors<CR>

let g:WhichKeyDesc_windows_split_window_below_and_focus = "<leader>ws split window below and focus"
nnoremap <leader>ws <C-w>s<C-w>j

let g:WhichKeyDesc_windows_split_window_right_and_focus = "<leader>wv split window right and focus"
nnoremap <leader>wv <C-w>v<C-w>l

let g:WhichKeyDesc_windows_focus_left = "<leader>wh focus window left"
nnoremap <leader>wh <C-w>h

let g:WhichKeyDesc_windows_focus_down = "<leader>wj focus window down"
nnoremap <leader>wj <C-w>j

let g:WhichKeyDesc_windows_focus_up = "<leader>wk focus window up"
nnoremap <leader>wk <C-w>k

let g:WhichKeyDesc_windows_focus_right = "<leader>wl focus window right"
nnoremap <leader>wl <C-w>l

nnoremap <leader>w<Esc> :<Esc>
#+end_src

*** Help

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_help = "<leader>h +help"

nnoremap <leader>h<Esc> :<Esc>
#+end_src

*** Quit

#+begin_src vimrc :tangle ~/.ideavimrc
let g:WhichKeyDesc_quit = "<leader>q +quit"

let g:WhichKeyDesc_quit_reload_ideavimrc = "<leader>qi reload ideavimrc"
nnoremap <leader>qi :source ~/.ideavimrc<CR>

let g:WhichKeyDesc_quit_exit = "<leader>qq exit"
nnoremap <leader>qq :action Exit<CR>

let g:WhichKeyDesc_quit_restart = "<leader>qr restart"
nnoremap <leader>qr :action RestartIde<CR>

nnoremap <leader>q<Esc> :<Esc>
#+end_src

* Git
** gitconfig

#+begin_src conf :tangle ~/.gitconfig
[user]
	email = bakmenson@gmail.com
	name = bakmenson
[core]
	excludesfile = /home/solus/.gitignore_global
[credential]
	helper = cache
#+end_src

** gitignore_global

#+begin_src conf :tangle ~/.gitignore_global
# Default
.gulp
.vscode
.idea
.uuid
.netrwhist
*.bak
accels.scm
vifminfo
vifminfo.json
tags

# Node
node_modules

# Dist & test
test
dist

# BD, logs
*.log
*.sql
*.sqlite
*.sqlite3

# Other
npm-debug.log*
yarn-debug.log*
yarn-error.log*
yarn.lock

# Special
Thumbs.db
Desktop.ini
ehthumbs.db
Icon?

### Python ###
__pycache__
.python-version
.mypy_cache
.vim
venv
*.lock

# Django
migrations

# MPV
watch_later

# qutebrowser
qsettings
#+end_src

* Firefox

#+begin_src css :tangle no
/* hides the native tabs */
#TabsToolbar { visibility: collapse; }

#sidebar-header { visibility: collapse; }

/* hide url bar
#nav-bar { visibility: collapse; } */

/* leaves space for the window buttons */
#nav-bar { margin-top: -1px; }
#+end_src
